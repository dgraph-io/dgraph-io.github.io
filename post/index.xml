<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dgraph Blog</title>
    <link>https://blog.dgraph.io/post/</link>
    <description>Recent content in Posts on Dgraph Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2017, Dgraph Labs, Inc. All rights reserved.</copyright>
    <lastBuildDate>Thu, 18 Apr 2019 00:00:00 +1100</lastBuildDate>
    
	<atom:link href="https://blog.dgraph.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building a To-Do List React App with Dgraph</title>
      <link>https://blog.dgraph.io/post/building-todo-list-react-dgraph/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/building-todo-list-react-dgraph/</guid>
      <description>In this tutorial we will build a To-Do List application using React JavaScript library and Dgraph as a backend database. We will use dgraph-js-http &amp;mdash; a library designed to greatly simplify the life of JavaScript developers when accessing Dgraph databases.
The tutorial is split into several steps:
 Creating a React App
 Starting a local Dgraph server using docker-compose
 Connecting to Dgraph from JavaScript and fetching data</description>
    </item>
    
    <item>
      <title>How Access Control Works in Dgraph</title>
      <link>https://blog.dgraph.io/post/access-control-in-dgraph/</link>
      <pubDate>Wed, 03 Apr 2019 00:06:20 -0800</pubDate>
      
      <guid>https://blog.dgraph.io/post/access-control-in-dgraph/</guid>
      <description>With GDPR passing in the EU on April 14th, 2016, users on the Internet are demanding protection of their privacy and data from Internet companies. The regulation has profound implications. Many companies take the law and users&amp;rsquo; demand seriously: they start encrypting data for traffic within their data centers, and employing strict control on who can access users&amp;rsquo; data. The Dgraph team takes full notice of that. Access control on the data stored in Dgraph is very important to our enterprise customers.</description>
    </item>
    
    <item>
      <title>The State of Caching in Go</title>
      <link>https://blog.dgraph.io/post/caching-in-go/</link>
      <pubDate>Thu, 07 Mar 2019 15:30:00 -0800</pubDate>
      
      <guid>https://blog.dgraph.io/post/caching-in-go/</guid>
      <description>This post made it to the top of Golang subreddit and is trending #2 on the front page of Hacker News. Do engage in discussion there and show us love by giving us a GitHub star.
Every database system requires a smart cache. That is, a cache that keeps the most frequently or recently accessed items and has a configurable memory utilization limit.
Being a graph database, Dgraph can access thousands&amp;mdash;even millions&amp;mdash;of keys per query, depending upon the number of intermediate results.</description>
    </item>
    
    <item>
      <title>Why Google Needed a Graph Serving System</title>
      <link>https://blog.dgraph.io/post/why-google-needed-graph-serving-system/</link>
      <pubDate>Wed, 13 Feb 2019 19:49:00 -0800</pubDate>
      
      <guid>https://blog.dgraph.io/post/why-google-needed-graph-serving-system/</guid>
      <description>This post made it to #3 on HackerNews front page. Do engage in discussion there and show us love by giving us a GitHub star.
When I introduce myself and explain what we are building at Dgraph Labs, I am typically asked if I worked at Facebook, or if what I&amp;rsquo;m building is inspired by Facebook. A lot of people know about the efforts at Facebook to serve their social graph, because they have published multiple articles about the graph infrastructure they put together.</description>
    </item>
    
    <item>
      <title>Optimizing Indexing in Dgraph</title>
      <link>https://blog.dgraph.io/post/indexing-in-dgraph/</link>
      <pubDate>Tue, 29 Jan 2019 12:00:00 -0800</pubDate>
      
      <guid>https://blog.dgraph.io/post/indexing-in-dgraph/</guid>
      <description>One of the cornerstones of Dgraph is that it allows a flexible schema, which can be modified in a live system, without any downtime. This involves changing data types and adding or removing indices with a single ALTER command to match the needs of an application developer.
Dgraph supports indexing natively, which means common use cases around full-text search, regular expressions, date matching, geolocation queries, etc. can all be executed within Dgraph, while maintaining transactional guarantees.</description>
    </item>
    
    <item>
      <title>Why we choose Badger over RocksDB in Dgraph</title>
      <link>https://blog.dgraph.io/post/badger-over-rocksdb-in-dgraph/</link>
      <pubDate>Thu, 24 Jan 2019 10:00:00 -0800</pubDate>
      
      <guid>https://blog.dgraph.io/post/badger-over-rocksdb-in-dgraph/</guid>
      <description>At Dgraph, we&amp;rsquo;re building the most advanced graph database in the world. It does distributed transactions, low-latency arbitrary depth joins, traversals, provides synchronous replication and horizontal scalability &amp;mdash; with a simple GraphQL-like API. Does it sounds like a tough problem? That&amp;rsquo;s because it is.
This blog post is about Badger, the key-value database that makes it all happen under the hood, housing all Dgraph data, including Raft logs. Badger uses an LSM tree structure for holding keys.</description>
    </item>
    
    <item>
      <title>Switching Dgraph to a Liberal License</title>
      <link>https://blog.dgraph.io/post/relicensing-dgraph/</link>
      <pubDate>Tue, 03 Apr 2018 03:19:54 -0700</pubDate>
      
      <guid>https://blog.dgraph.io/post/relicensing-dgraph/</guid>
      <description>Last year, we had switched Dgraph license to AGPLv3.0, considering reasons like the ability to monetize in a competitive environment. In particular,
 The threat of duplicate commercial services and enterprise features built by others without paying anything back towards the development of the open source version.
Update (Nov 2018): This post is outdated. Dgraph core is back to Apache 2.0, with no restrictions.
 This remains a credible threat; nothing has changed in that regard.</description>
    </item>
    
    <item>
      <title>Releasing Dgraph 1.0: Production-Ready Graph Database</title>
      <link>https://blog.dgraph.io/post/releasing-v1.0/</link>
      <pubDate>Tue, 19 Dec 2017 17:33:22 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/releasing-v1.0/</guid>
      <description>Dgraph started around end-August, picked up steam in mid-October, and v0.1 was released in early-December, 2015. From one, the contributors grew to 46, with the project amassing over 4000 Github stars over the past two years. 2190 commits (we squash our branches), 277 branches and 25 releases later, we&amp;rsquo;re proud to announce that Dgraph has reached v1.0, our first production-ready release.
To give a bit of a background &amp;ndash; Dgraph, as a graph database, is designed to excel at the weaknesses of traditional relational databases: traversing relationships and efficiently executing complex joins at scale.</description>
    </item>
    
    <item>
      <title>Open Source Alternative to AmazonÂ Neptune</title>
      <link>https://blog.dgraph.io/post/neptune/</link>
      <pubDate>Fri, 01 Dec 2017 17:56:17 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/neptune/</guid>
      <description>Amazon just announced their new graph database service, called Amazon Neptune. As per a TechCrunch article,
 Amazon Neptune has been optimized to handle billions of relationships and run queries within milliseconds. Neptune supports fast-failover, point-in-time recovery and Multi-AZ deployments. And you can also encrypt data at rest.
 This is very exciting news for the entire tech ecosystem. It clearly shows that graph databases are going mainstream. Already many tech companies are using existing graph solutions or building their own graph-like systems.</description>
    </item>
    
    <item>
      <title>Releasing distributed transactions in v0.9</title>
      <link>https://blog.dgraph.io/post/v0.9/</link>
      <pubDate>Tue, 14 Nov 2017 15:30:04 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/v0.9/</guid>
      <description>It all started with a Github issue.
At Dgraph, we really care about user feedback. Most of what we&amp;rsquo;ve built starting January 2017, has been based what our community (that&amp;rsquo;s you!) told us. The biggest contribution that we get from our community, is in the form of feedback. We&amp;rsquo;ll forgo any code contribution for quality feedback based on real-world usage.
Since the beginning of Dgraph, transactions were road mapped as a post v1.</description>
    </item>
    
    <item>
      <title>Loading close to 1M edges/sec into Dgraph</title>
      <link>https://blog.dgraph.io/post/bulkloader/</link>
      <pubDate>Mon, 09 Oct 2017 17:09:10 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/bulkloader/</guid>
      <description>We&amp;rsquo;re seeing more and more users who want to load massive data sets into Dgraph. Many users want to load billions of edges, and some even want to load up to 50 billion edges! When we heard about the size of these datasets, we knew we needed to have a solid data loading story so that we could support the most extreme demands from our users.
In a previous blog post, we discussed some of the challenges that we met on our journey towards loading massive datasets into Dgraph.</description>
    </item>
    
    <item>
      <title>Concurrent ACID Transactions in Badger</title>
      <link>https://blog.dgraph.io/post/badger-txn/</link>
      <pubDate>Thu, 05 Oct 2017 13:30:16 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/badger-txn/</guid>
      <description>When we started working on Badger, the aim was to keep things stupid simple. We needed to get rid of Cgo from Dgraph codebase, while also building something which can perform really well. We wanted to create it for ourselves and the broader Go community. Go has been a language of choice for many databases, and providing a performant native Go key-value store seemed like a win for everyone.</description>
    </item>
    
    <item>
      <title>[Opinion] SQL is not beating NoSQL. NoSQL is evolving.</title>
      <link>https://blog.dgraph.io/post/sql-vs-nosql/</link>
      <pubDate>Tue, 03 Oct 2017 13:20:35 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/sql-vs-nosql/</guid>
      <description>Ajay Kulkarni, the co-founder of Timescale DB wrote an article about âWhy SQL is beating NoSQL,â which became an instant hit. He made a compelling case about how SQL is making a comeback, citing Google Spanner and CockroachDB.
The analysis was mostly agreeable, except for one major flaw. It is not SQL which is making a comeback, its NoSQL which is morphing into providing a familiar interface.
Bigtable and MapReduce were developed to deal with an enormous amount of data at Google.</description>
    </item>
    
    <item>
      <title>Learn the basics of GraphQL&#43;-, now available on video</title>
      <link>https://blog.dgraph.io/post/basics-graphql/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dgraph.io/post/basics-graphql/</guid>
      <description>Dgraph has its own custom query language based on GraphQL, called GraphQL+-. You can learn about the basics of GraphQL+- in our latest screencast that introduces you to writing queries in it, which can be found right below. The screencast will explore the content in the interactive tour it compliments, but in further depth. You can also subscribe to our YouTube channel if you would like to be posted when we release new videos.</description>
    </item>
    
    <item>
      <title>Badger vs LMDB vs BoltDB: Benchmarking key-value databases in Go</title>
      <link>https://blog.dgraph.io/post/badger-lmdb-boltdb/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dgraph.io/post/badger-lmdb-boltdb/</guid>
      <description>If you have been following us, you may know that we released Badger a few months ago. Badger is a simple, efficient, and persistent key-value store, written in a hipster language. Even though it is not at v1.0 yet, we have already received a great response from the community. As of writing, Badger has 2350 stars on Github, and there have been lots of discussions online since the release announcement.</description>
    </item>
    
    <item>
      <title>Making Badger Crash Resilient with ALICE</title>
      <link>https://blog.dgraph.io/post/alice/</link>
      <pubDate>Mon, 14 Aug 2017 13:21:25 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/alice/</guid>
      <description>Crashes can occur for many different reasons and can manifest themselves in many different forms. A program can experience a segfault or uncaught exception. If it&amp;rsquo;s running on Linux, a kernel panic could occur. If on Windows, a STOP error could occur, displaying the infamous BSOD. Even then, crashes aren&amp;rsquo;t the only thing you have to worry about. The UPS could fail (or be absent), or the power could go out.</description>
    </item>
    
    <item>
      <title>Scale the shit out of this!</title>
      <link>https://blog.dgraph.io/post/scaling-dgraph/</link>
      <pubDate>Tue, 08 Aug 2017 17:23:51 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/scaling-dgraph/</guid>
      <description>Starting v0.8, we have aimed to focus purely on the stability and performance of Dgraph. Our feature set is at this point good enough for most users &amp;ndash; so we&amp;rsquo;ve decided to freeze it until we reach v1.0.
Part of ensuring stability and performance led us to try and load the entire Stack Overflow on Dgraph; around 2 billion edges. With full-text search, reverses and other indices, this jumps between 6-8 billion edges; which poses unique challenges.</description>
    </item>
    
    <item>
      <title>Building a Stack Overflow Clone with Dgraph, and React</title>
      <link>https://blog.dgraph.io/post/building-graphoverflow/</link>
      <pubDate>Wed, 02 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dgraph.io/post/building-graphoverflow/</guid>
      <description>&lt;p&gt;I have recently built a Stack Overflow clone with Dgraph and React. I was delightfully surprised by the pleasant developer experience and the performance of my application. In this post, I would like to tell the story of how I built &lt;em&gt;Graphoverflow&lt;/em&gt; and share the best practices I learned for using Dgraph to build a modern web application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Orchestrating signal and wait in Go</title>
      <link>https://blog.dgraph.io/post/signal-and-wait/</link>
      <pubDate>Wed, 19 Jul 2017 15:24:00 -0700</pubDate>
      
      <guid>https://blog.dgraph.io/post/signal-and-wait/</guid>
      <description>&lt;p&gt;One of the common use case in Go is to start a few goroutines to do some
work. These goroutines block listening in on a channel, waiting for more work to
arrive. At some point, you want to signal these goroutines to stop accepting
more work and exit, so you can cleanly shut down the program.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Running Stack Overflow on Dgraph</title>
      <link>https://blog.dgraph.io/post/sql-vs-dgraph/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dgraph.io/post/sql-vs-dgraph/</guid>
      <description>We have been taught, conditioned, trained to use SQL all our lives as engineers. It was there in schools, there when we went to college. It was being used at the company that we joined. It was such a common interview question that it no longer is. We don&amp;rsquo;t have just one, but an array of SQL databases to choose from. MySQL was released 22 years ago, in 1995 (youngest engineer at Dgraph was born the same year).</description>
    </item>
    
    <item>
      <title>Build a Realtime Recommendation Engine: Part 2</title>
      <link>https://blog.dgraph.io/post/recommendation2/</link>
      <pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dgraph.io/post/recommendation2/</guid>
      <description>This is part 2 of a two-part series on recommendations using Dgraph. Check our part 1 here.
In the last post, we looked at how many applications and web apps no longer present static data, but rather generate interesting recommendations to users. There&amp;rsquo;s a whole field of theory and practice in recommendation engines that we touched on, talking about content-based (based on properties of objects) and collaborative (based on similar users) filtering techniques based on a chapter from Stanford MOOC Minning Massive Datasets.</description>
    </item>
    
    <item>
      <title>Build a Realtime Recommendation Engine: Part 1</title>
      <link>https://blog.dgraph.io/post/recommendation/</link>
      <pubDate>Thu, 29 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dgraph.io/post/recommendation/</guid>
      <description>Preface In today&amp;rsquo;s world, user experience is paramount. It&amp;rsquo;s no longer about basic CRUD, just serving user data; it&amp;rsquo;s about mining the data to generate interesting predictions and suggesting actions to the user.
That&amp;rsquo;s the field of recommendations. They&amp;rsquo;re everywhere. In fact, they happen so frequently that you don&amp;rsquo;t even realize them.
You wake up and open Facebook, which shows you a feed of articles that it has chosen for you based on your viewing history.</description>
    </item>
    
    <item>
      <title>go get github.com/dgraph-io/dgraph/...</title>
      <link>https://blog.dgraph.io/post/goget/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dgraph.io/post/goget/</guid>
      <description>Thank you Go community for all the love that you showered on Badger. Within 8 hours of announcing Badger, the blog post made it to the first page of Hacker News. And within three days, the Github repo received 1250 stars, having crossed 1500 by the time of this post. We have already merged contributions and received feedback that we need to work on.
All this goes to show how much people enjoy Go native libraries.</description>
    </item>
    
    <item>
      <title>Introducing Badger: A fast key-value store written purely in Go</title>
      <link>https://blog.dgraph.io/post/badger/</link>
      <pubDate>Sun, 14 May 2017 20:18:15 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/badger/</guid>
      <description>We have built an efficient and persistent log structured merge (LSM) tree based key-value store, purely in Go language. It is based upon WiscKey paper included in USENIX FAST 2016. This design is highly SSD-optimized and separates keys from values to minimize I/O amplification; leveraging both the sequential and the random performance of SSDs.
We call it Badger. Based on benchmarks, Badger is at least 3.5x faster than RocksDB when doing random reads.</description>
    </item>
    
    <item>
      <title>String matching in Dgraph v0.7.5</title>
      <link>https://blog.dgraph.io/post/string-matching/</link>
      <pubDate>Mon, 10 Apr 2017 12:10:00 +0200</pubDate>
      
      <guid>https://blog.dgraph.io/post/string-matching/</guid>
      <description>&lt;p&gt;The recent release of Dgraph is packed with new features and improvements.
Many of them are related to strings - full text search (with support for 15 languages!) and regular expression matching have been added, and handling of string values in multiple languages was greatly improved.
All of these changes make Dgraph an excellent tool for working with multilingual applications.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a long lasting company around open-source</title>
      <link>https://blog.dgraph.io/post/licensing/</link>
      <pubDate>Sun, 26 Mar 2017 07:30:00 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/licensing/</guid>
      <description>Dgraph started with the idea that every startup should be able to have the same level of technology as run by big giants. We designed Dgraph from ground-up to allow data sharding, horizontal scalability, consistent replication, and a fast and distributed architecture.
Update (Apr 2018): Dgraph has switched back to Apache 2.0, with a Commons clause restriction. See new post here.
We also dream that graph database would no longer run as a secondary database.</description>
    </item>
    
    <item>
      <title>Neo4j vs Dgraph - The numbers speak for themselves</title>
      <link>https://blog.dgraph.io/post/benchmark-neo4j/</link>
      <pubDate>Mon, 23 Jan 2017 18:07:44 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/benchmark-neo4j/</guid>
      <description>&lt;p&gt;As &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
 is nearing its v0.8 release, we wanted to spend some time comparing it against Neo4j, which is the &lt;a href=&#34;http://db-engines.com/en/ranking/graph+dbms&#34;&gt;most popular graph database&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have divided this post into five parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#ref-loading-data&#34;&gt;Loading data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ref-querying&#34;&gt;Querying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ref-issues-faced&#34;&gt;Issues faced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ref-feature-comparison&#34;&gt;Dgraph vs Neo4j Feature Comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ref-dgraph-principles&#34;&gt;Principles behind Dgraph&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Releasing Dgraph v0.7.1</title>
      <link>https://blog.dgraph.io/post/v0.7-release/</link>
      <pubDate>Thu, 05 Jan 2017 20:00:00 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/v0.7-release/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
 team is super excited to present v0.7.1 of &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
. This version is the biggest step we&amp;rsquo;ve taken towards our production aim of v1.0.
We&amp;rsquo;ve implemented &lt;strong&gt;90% of all the features we had planned&lt;/strong&gt; in our &lt;a href=&#34;https://github.com/dgraph-io/dgraph/issues/1&#34;&gt;product roadmap&lt;/a&gt;, including replication and high-availability using RAFT protocol, indexing, filtering, sorting, geospatial queries, and backups.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dgraph hugo blog theme</title>
      <link>https://blog.dgraph.io/post/hugo/</link>
      <pubDate>Thu, 06 Oct 2016 16:56:08 +0530</pubDate>
      
      <guid>https://blog.dgraph.io/post/hugo/</guid>
      <description>We at Dgraph love Hugo and use it for our blog. It&amp;rsquo;s blazingly fast, supports Markdown is written in Go and is very easy to work with. Initially, we were confused between Hugo vs. having a publication on Medium but later decided to go with Hugo because of the factors mentioned above. One of the things that we found lacking in the Hugo ecosystem was a good theme that we could use for our blog.</description>
    </item>
    
    <item>
      <title>Golang: Run multiple services on one port</title>
      <link>https://blog.dgraph.io/post/cmux/</link>
      <pubDate>Tue, 04 Oct 2016 11:59:57 +0530</pubDate>
      
      <guid>https://blog.dgraph.io/post/cmux/</guid>
      <description>&lt;p&gt;Ever faced the problem of having multiple ports in an application, one for each service?
In this post, I&amp;rsquo;m going to brief about how to run multiple services via the same listener port.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dgraph: JSON vs. Binary clients</title>
      <link>https://blog.dgraph.io/post/protobuf/</link>
      <pubDate>Mon, 12 Sep 2016 10:54:15 +0530</pubDate>
      
      <guid>https://blog.dgraph.io/post/protobuf/</guid>
      <description>&lt;p&gt;When I started building the initial version of the &lt;a href=&#34;https://github.com/dgraph-io/dgraphgoclient&#34;&gt;Dgraph Go client&lt;/a&gt;, we were looking for a serialization format which was fast, easy to use and supported multiple language runtimes. We finally implemented our client using &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Protocol Buffers&lt;/a&gt; which &lt;strong&gt;gave twice the speed and consumed two-third memory&lt;/strong&gt; compared to JSON according to our benchmarks.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gru: Open source solution for better technical interviews</title>
      <link>https://blog.dgraph.io/post/gru/</link>
      <pubDate>Thu, 21 Jul 2016 11:53:04 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/gru/</guid>
      <description>&lt;p&gt;Candidate &lt;strong&gt;REJECTED&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;4 out of 5 interviewers had liked the candidate. I was one of the 4. He had received either above or very close to 3.0, which is a good score. The interviewer who didn&amp;rsquo;t like the candidate had been at Google since early 2004. And he didn&amp;rsquo;t like the candidate&amp;rsquo;s joke question about whether he was very rich because he joined before Google went IPO. &lt;em&gt;I guess he wasn&amp;rsquo;t.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Releasing v0.4</title>
      <link>https://blog.dgraph.io/post/v0.4-release/</link>
      <pubDate>Thu, 14 Jul 2016 16:16:14 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/v0.4-release/</guid>
      <description>&lt;p&gt;Thanks for your feedback over the last couple of months. This release addresses some of the main pain points of using &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Custom encoding: Go implementation in net/rpc vs grpc and why we switched</title>
      <link>https://blog.dgraph.io/post/rpc-vs-grpc/</link>
      <pubDate>Sat, 25 Jun 2016 19:06:45 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/rpc-vs-grpc/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
, we aim to build a low latency, distributed graph database.
This means our data is distributed among nodes in the cluster.
Executing a query means multiple nodes are communicating with each other.
To keep our latency of communication low, we use a new form of serialization library called &lt;a href=&#34;https://google.github.io/flatbuffers/&#34;&gt;Flatbuffers&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Can it really scale?</title>
      <link>https://blog.dgraph.io/post/performance-throughput-latency/</link>
      <pubDate>Tue, 21 Jun 2016 10:20:32 +0530</pubDate>
      
      <guid>https://blog.dgraph.io/post/performance-throughput-latency/</guid>
      <description>&lt;p&gt;In this post, weâll look at how &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
 performs on varying the number of nodes in the cluster, specs of the machine and load on the server to answer the ultimate question: &lt;em&gt;Can it really scale?&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wisemonk: A slackbot to move discussions from Slack to Discourse</title>
      <link>https://blog.dgraph.io/post/wisemonk/</link>
      <pubDate>Wed, 15 Jun 2016 11:39:27 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/wisemonk/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Then there was the fact that we had so many channels and direct messages and group chats.
It multiplexed my brain and left me in a constant state of anxiety, feeling that I needed to always be on guard.
&lt;em&gt;â &lt;a href=&#34;https://blog.agilebits.com/2016/04/19/curing-our-slack-addiction/&#34;&gt;Dave Teare, Curing Our Slack Addiction&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Hello, World!</title>
      <link>https://blog.dgraph.io/post/hello-world/</link>
      <pubDate>Mon, 18 Apr 2016 14:37:08 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/hello-world/</guid>
      <description>&lt;p&gt;&lt;strong&gt;I&amp;rsquo;m very excited&lt;/strong&gt; to use this first post to talk about &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
, what it is and why it was created.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>