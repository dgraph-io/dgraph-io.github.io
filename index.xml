<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dgraph Blog</title>
    <link>https://open.dgraph.io/</link>
    <description>Recent content on Dgraph Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016, Dgraph Labs, Inc. All rights reserved.</copyright>
    <lastBuildDate>Mon, 29 May 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://open.dgraph.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go get github.com/dgraph-io/dgraph/...</title>
      <link>https://open.dgraph.io/post/goget/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://open.dgraph.io/post/goget/</guid>
      <description>Thank you Go community for all the love that you showered on Badger. Within 8 hours of announcing Badger, the blog post made it to the first page of Hacker News. And within three days, the Github repo received 1250 stars, having crossed 1500 by the time of this post. We have already merged contributions and received feedback that we need to work on.
All this goes to show how much people enjoy Go native libraries.</description>
    </item>
    
    <item>
      <title>Introducing Badger: A fast key-value store written natively in Go</title>
      <link>https://open.dgraph.io/post/badger/</link>
      <pubDate>Sun, 14 May 2017 20:18:15 +1000</pubDate>
      
      <guid>https://open.dgraph.io/post/badger/</guid>
      <description>We have built an efficient and persistent log structured merge (LSM) tree based key-value store, natively in Go language. It is based upon WiscKey paper included in USENIX FAST 2016. This design is highly SSD-optimized and separates keys from values to minimize I/O amplification; leveraging both the sequential and the random performance of SSDs.
We call it Badger. Based on benchmarks, Badger is at least 3.5x faster than RocksDB when doing random reads.</description>
    </item>
    
    <item>
      <title>String matching in Dgraph v0.7.5</title>
      <link>https://open.dgraph.io/post/string-matching/</link>
      <pubDate>Mon, 10 Apr 2017 12:10:00 +0200</pubDate>
      
      <guid>https://open.dgraph.io/post/string-matching/</guid>
      <description>&lt;p&gt;The recent release of Dgraph is packed with new features and improvements.
Many of them are related to strings - full text search (with support for 15 languages!) and regular expression matching have been added, and handling of string values in multiple languages was greatly improved.
All of these changes make Dgraph an excellent tool for working with multilingual applications.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a long lasting company around open-source</title>
      <link>https://open.dgraph.io/post/licensing/</link>
      <pubDate>Sun, 26 Mar 2017 07:30:00 +1100</pubDate>
      
      <guid>https://open.dgraph.io/post/licensing/</guid>
      <description>Dgraph started with the idea that every startup should be able to have the same level of technology as run by big giants. We designed Dgraph from ground-up to allow data sharding, horizontal scalability, consistent replication, and a fast and distributed architecture.
We also dream that graph database would no longer run as a secondary database. By building a truly robust piece of technology, we can have our users run only one database, which allows arbitrarily complex queries while providing rock solid performance.</description>
    </item>
    
    <item>
      <title>Neo4j vs Dgraph - The numbers speak for themselves</title>
      <link>https://open.dgraph.io/post/benchmark-neo4j/</link>
      <pubDate>Mon, 23 Jan 2017 18:07:44 +1100</pubDate>
      
      <guid>https://open.dgraph.io/post/benchmark-neo4j/</guid>
      <description>&lt;p&gt;As &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
 is nearing its v0.8 release, we wanted to spend some time comparing it against Neo4j, which is the &lt;a href=&#34;http://db-engines.com/en/ranking/graph+dbms&#34;&gt;most popular graph database&lt;/a&gt;. We have divided this post into five parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Loading data&lt;/li&gt;
&lt;li&gt;Querying&lt;/li&gt;
&lt;li&gt;Issues faced&lt;/li&gt;
&lt;li&gt;Features&lt;/li&gt;
&lt;li&gt;Principles behind Dgraph&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Releasing Dgraph v0.7.1</title>
      <link>https://open.dgraph.io/post/v0.7-release/</link>
      <pubDate>Thu, 05 Jan 2017 20:00:00 +1100</pubDate>
      
      <guid>https://open.dgraph.io/post/v0.7-release/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
 team is super excited to present v0.7.1 of &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
. This version is the biggest step we&amp;rsquo;ve taken towards our production aim of v1.0.
We&amp;rsquo;ve implemented &lt;strong&gt;90% of all the features we had planned&lt;/strong&gt; in our &lt;a href=&#34;https://github.com/dgraph-io/dgraph/issues/1&#34;&gt;product roadmap&lt;/a&gt;, including replication and high-availability using RAFT protocol, indexing, filtering, sorting, geospatial queries, and backups.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dgraph hugo blog theme</title>
      <link>https://open.dgraph.io/post/hugo/</link>
      <pubDate>Thu, 06 Oct 2016 16:56:08 +0530</pubDate>
      
      <guid>https://open.dgraph.io/post/hugo/</guid>
      <description>We at Dgraph love Hugo and use it for our blog. It&amp;rsquo;s blazingly fast, supports Markdown is written in Go and is very easy to work with. Initially, we were confused between Hugo vs. having a publication on Medium but later decided to go with Hugo because of the factors mentioned above. One of the things that we found lacking in the Hugo ecosystem was a good theme that we could use for our blog.</description>
    </item>
    
    <item>
      <title>Golang: Run multiple services on one port</title>
      <link>https://open.dgraph.io/post/cmux/</link>
      <pubDate>Tue, 04 Oct 2016 11:59:57 +0530</pubDate>
      
      <guid>https://open.dgraph.io/post/cmux/</guid>
      <description>&lt;p&gt;Ever faced the problem of having multiple ports in an application, one for each service?
In this post, I&amp;rsquo;m going to brief about how to run multiple services via the same listener port.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dgraph: JSON vs. Binary clients</title>
      <link>https://open.dgraph.io/post/protobuf/</link>
      <pubDate>Mon, 12 Sep 2016 10:54:15 +0530</pubDate>
      
      <guid>https://open.dgraph.io/post/protobuf/</guid>
      <description>&lt;p&gt;When I started building the initial version of the &lt;a href=&#34;https://github.com/dgraph-io/dgraphgoclient&#34;&gt;Dgraph Go client&lt;/a&gt;, we were looking for a serialization format which was fast, easy to use and supported multiple language runtimes. We finally implemented our client using &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Protocol Buffers&lt;/a&gt; which &lt;strong&gt;gave twice the speed and consumed two-third memory&lt;/strong&gt; compared to JSON according to our benchmarks.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gru: Open source solution for better technical interviews</title>
      <link>https://open.dgraph.io/post/gru/</link>
      <pubDate>Thu, 21 Jul 2016 11:53:04 +1000</pubDate>
      
      <guid>https://open.dgraph.io/post/gru/</guid>
      <description>&lt;p&gt;Candidate &lt;strong&gt;REJECTED&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;4 out of 5 interviewers had liked the candidate. I was one of the 4. He had received either above or very close to 3.0, which is a good score. The interviewer who didn&amp;rsquo;t like the candidate had been at Google since early 2004. And he didn&amp;rsquo;t like the candidate&amp;rsquo;s joke question about whether he was very rich because he joined before Google went IPO. &lt;em&gt;I guess he wasn&amp;rsquo;t.&lt;/em&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Releasing v0.4</title>
      <link>https://open.dgraph.io/post/v0.4-release/</link>
      <pubDate>Thu, 14 Jul 2016 16:16:14 +1000</pubDate>
      
      <guid>https://open.dgraph.io/post/v0.4-release/</guid>
      <description>&lt;p&gt;Thanks for your feedback over the last couple of months. This release addresses some of the main pain points of using &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Custom encoding: Go implementation in net/rpc vs grpc and why we switched</title>
      <link>https://open.dgraph.io/post/rpc-vs-grpc/</link>
      <pubDate>Sat, 25 Jun 2016 19:06:45 +1000</pubDate>
      
      <guid>https://open.dgraph.io/post/rpc-vs-grpc/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
, we aim to build a low latency, distributed graph database.
This means our data is distributed among nodes in the cluster.
Executing a query means multiple nodes are communicating with each other.
To keep our latency of communication low, we use a new form of serialization library called &lt;a href=&#34;https://google.github.io/flatbuffers/&#34;&gt;Flatbuffers&lt;/a&gt;.

&amp;gt; What sets FlatBuffers apart is that it represents hierarchical data in a flat binary buffer in such a way that it can still be accessed directly without parsing/unpacking, while also still supporting data structure evolution (forwards/backwards compatibility).
&amp;gt; The only memory needed to access your data is that of the buffer.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Can it really scale?</title>
      <link>https://open.dgraph.io/post/performance-throughput-latency/</link>
      <pubDate>Tue, 21 Jun 2016 10:20:32 +0530</pubDate>
      
      <guid>https://open.dgraph.io/post/performance-throughput-latency/</guid>
      <description>&lt;p&gt;In this post, we’ll look at how &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
 performs on varying the number of nodes in the cluster, specs of the machine and load on the server to answer the ultimate question: &lt;em&gt;Can it really scale?&lt;/em&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wisemonk: A slackbot to move discussions from Slack to Discourse</title>
      <link>https://open.dgraph.io/post/wisemonk/</link>
      <pubDate>Wed, 15 Jun 2016 11:39:27 +1000</pubDate>
      
      <guid>https://open.dgraph.io/post/wisemonk/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Then there was the fact that we had so many channels and direct messages and group chats.
It multiplexed my brain and left me in a constant state of anxiety, feeling that I needed to always be on guard.
&lt;em&gt;— &lt;a href=&#34;https://blog.agilebits.com/2016/04/19/curing-our-slack-addiction/&#34;&gt;Dave Teare, Curing Our Slack Addiction&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello, World!</title>
      <link>https://open.dgraph.io/post/hello-world/</link>
      <pubDate>Mon, 18 Apr 2016 14:37:08 +1000</pubDate>
      
      <guid>https://open.dgraph.io/post/hello-world/</guid>
      <description>&lt;p&gt;&lt;strong&gt;I&amp;rsquo;m very excited&lt;/strong&gt; to use this first post to talk about &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
, what it is and why it was created.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>