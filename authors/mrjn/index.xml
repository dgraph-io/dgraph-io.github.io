<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dgraph Blog</title>
    <link>https://blog.dgraph.io/authors/mrjn/</link>
    <description>Recent content on Dgraph Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2020, Dgraph Labs, Inc. All rights reserved.</copyright>
    <lastBuildDate>Thu, 04 Jun 2020 04:50:00 -0700</lastBuildDate>
    
	<atom:link href="https://blog.dgraph.io/authors/mrjn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How I solved Jepsen with OpenCensus Distributed Tracing: A personal journey</title>
      <link>https://blog.dgraph.io/post/solving-jepsen-with-opencensus/</link>
      <pubDate>Thu, 04 Jun 2020 04:50:00 -0700</pubDate>
      
      <guid>https://blog.dgraph.io/post/solving-jepsen-with-opencensus/</guid>
      <description>This post made it to the front page of Go Reddit for over 24hrs. Do engage in discussion there and show us your love by giving Dgraph a GitHub Star.</description>
    </item>
    
    <item>
      <title>Building a Native GraphQL Database: Challenges, Learnings and Future</title>
      <link>https://blog.dgraph.io/post/building-native-graphql-database-dgraph/</link>
      <pubDate>Tue, 29 Oct 2019 02:13:13 -0700</pubDate>
      
      <guid>https://blog.dgraph.io/post/building-native-graphql-database-dgraph/</guid>
      <description>&amp;ldquo;GraphQL is not a Graph DB query language &amp;mdash; it&amp;rsquo;s a replacement for REST APIs.&amp;rdquo;
 That&amp;rsquo;s my standard opening statement whenever talking about Dgraph&amp;rsquo;s choice of the query language.</description>
    </item>
    
    <item>
      <title>How Dgraph Labs Raised Series A</title>
      <link>https://blog.dgraph.io/post/how-dgraph-labs-raised-series-a/</link>
      <pubDate>Wed, 31 Jul 2019 05:05:05 -0700</pubDate>
      
      <guid>https://blog.dgraph.io/post/how-dgraph-labs-raised-series-a/</guid>
      <description>The blog post by ZDNet made it to HackerNews front page. Do engage in discussion there, and show us love by giving us a GitHub star.</description>
    </item>
    
    <item>
      <title>The State of Caching in Go</title>
      <link>https://blog.dgraph.io/post/caching-in-go/</link>
      <pubDate>Thu, 07 Mar 2019 15:30:00 -0800</pubDate>
      
      <guid>https://blog.dgraph.io/post/caching-in-go/</guid>
      <description>Since writing this post, we have built Ristretto: A High Performance Go cache. Read all about it here.
This post made it to the top of Golang subreddit and is trending #2 on the front page of Hacker News.</description>
    </item>
    
    <item>
      <title>Why Google Needed a Graph Serving System</title>
      <link>https://blog.dgraph.io/post/why-google-needed-graph-serving-system/</link>
      <pubDate>Wed, 13 Feb 2019 19:49:00 -0800</pubDate>
      
      <guid>https://blog.dgraph.io/post/why-google-needed-graph-serving-system/</guid>
      <description>This post made it to #3 on HackerNews front page. Do engage in discussion there and show us love by giving us a GitHub star.</description>
    </item>
    
    <item>
      <title>Why we choose Badger over RocksDB in Dgraph</title>
      <link>https://blog.dgraph.io/post/badger-over-rocksdb-in-dgraph/</link>
      <pubDate>Thu, 24 Jan 2019 10:00:00 -0800</pubDate>
      
      <guid>https://blog.dgraph.io/post/badger-over-rocksdb-in-dgraph/</guid>
      <description>At Dgraph, we&amp;rsquo;re building the most advanced graph database in the world. It does distributed transactions, low-latency arbitrary depth joins, traversals, provides synchronous replication and horizontal scalability &amp;mdash; with a simple GraphQL-like API.</description>
    </item>
    
    <item>
      <title>Switching Dgraph to a Liberal License</title>
      <link>https://blog.dgraph.io/post/relicensing-dgraph/</link>
      <pubDate>Tue, 03 Apr 2018 03:19:54 -0700</pubDate>
      
      <guid>https://blog.dgraph.io/post/relicensing-dgraph/</guid>
      <description>Last year, we had switched Dgraph license to AGPLv3.0, considering reasons like the ability to monetize in a competitive environment. In particular,</description>
    </item>
    
    <item>
      <title>Releasing Dgraph 1.0: Production-Ready Graph Database</title>
      <link>https://blog.dgraph.io/post/releasing-v1.0/</link>
      <pubDate>Tue, 19 Dec 2017 17:33:22 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/releasing-v1.0/</guid>
      <description>Dgraph started around end-August, picked up steam in mid-October, and v0.1 was released in early-December, 2015. From one, the contributors grew to 46, with the project amassing over 4000 Github stars over the past two years.</description>
    </item>
    
    <item>
      <title>Open Source Alternative to Amazon Neptune</title>
      <link>https://blog.dgraph.io/post/neptune/</link>
      <pubDate>Fri, 01 Dec 2017 17:56:17 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/neptune/</guid>
      <description>Amazon just announced their new graph database service, called Amazon Neptune. As per a TechCrunch article,
 Amazon Neptune has been optimized to handle billions of relationships and run queries within milliseconds.</description>
    </item>
    
    <item>
      <title>Concurrent ACID Transactions in Badger</title>
      <link>https://blog.dgraph.io/post/badger-txn/</link>
      <pubDate>Thu, 05 Oct 2017 13:30:16 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/badger-txn/</guid>
      <description>When we started working on Badger, the aim was to keep things stupid simple. We needed to get rid of Cgo from Dgraph codebase, while also building something which can perform really well.</description>
    </item>
    
    <item>
      <title>[Opinion] SQL is not beating NoSQL. NoSQL is evolving.</title>
      <link>https://blog.dgraph.io/post/sql-vs-nosql/</link>
      <pubDate>Tue, 03 Oct 2017 13:20:35 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/sql-vs-nosql/</guid>
      <description>Ajay Kulkarni, the co-founder of Timescale DB wrote an article about “Why SQL is beating NoSQL,” which became an instant hit.</description>
    </item>
    
    <item>
      <title>Scale the shit out of this!</title>
      <link>https://blog.dgraph.io/post/scaling-dgraph/</link>
      <pubDate>Tue, 08 Aug 2017 17:23:51 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/scaling-dgraph/</guid>
      <description>Starting v0.8, we have aimed to focus purely on the stability and performance of Dgraph. Our feature set is at this point good enough for most users &amp;ndash; so we&amp;rsquo;ve decided to freeze it until we reach v1.</description>
    </item>
    
    <item>
      <title>Orchestrating signal and wait in Go</title>
      <link>https://blog.dgraph.io/post/signal-and-wait/</link>
      <pubDate>Wed, 19 Jul 2017 15:24:00 -0700</pubDate>
      
      <guid>https://blog.dgraph.io/post/signal-and-wait/</guid>
      <description>&lt;p&gt;One of the common use case in Go is to start a few goroutines to do some
work. These goroutines block listening in on a channel, waiting for more work to
arrive. At some point, you want to signal these goroutines to stop accepting
more work and exit, so you can cleanly shut down the program.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Running Stack Overflow on Dgraph</title>
      <link>https://blog.dgraph.io/post/sql-vs-dgraph/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dgraph.io/post/sql-vs-dgraph/</guid>
      <description>We have been taught, conditioned, trained to use SQL all our lives as engineers. It was there in schools, there when we went to college.</description>
    </item>
    
    <item>
      <title>go get github.com/dgraph-io/dgraph/...</title>
      <link>https://blog.dgraph.io/post/goget/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dgraph.io/post/goget/</guid>
      <description>Thank you Go community for all the love that you showered on Badger. Within 8 hours of announcing Badger, the blog post made it to the first page of Hacker News.</description>
    </item>
    
    <item>
      <title>Introducing Badger: A fast key-value store written purely in Go</title>
      <link>https://blog.dgraph.io/post/badger/</link>
      <pubDate>Sun, 14 May 2017 20:18:15 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/badger/</guid>
      <description>We have built an efficient and persistent log structured merge (LSM) tree based key-value store, purely in Go language. It is based upon WiscKey paper included in USENIX FAST 2016.</description>
    </item>
    
    <item>
      <title>Building a long lasting company around open-source</title>
      <link>https://blog.dgraph.io/post/licensing/</link>
      <pubDate>Sun, 26 Mar 2017 07:30:00 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/licensing/</guid>
      <description>Dgraph started with the idea that every startup should be able to have the same level of technology as run by big giants.</description>
    </item>
    
    <item>
      <title>Releasing Dgraph v0.7.1</title>
      <link>https://blog.dgraph.io/post/v0.7-release/</link>
      <pubDate>Thu, 05 Jan 2017 20:00:00 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/v0.7-release/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
 team is super excited to present v0.7.1 of &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
. This version is the biggest step we&amp;rsquo;ve taken towards our production aim of v1.0.
We&amp;rsquo;ve implemented &lt;strong&gt;90% of all the features we had planned&lt;/strong&gt; in our &lt;a href=&#34;https://github.com/dgraph-io/dgraph/issues/1&#34;&gt;product roadmap&lt;/a&gt;, including replication and high-availability using RAFT protocol, indexing, filtering, sorting, geospatial queries, and backups.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gru: Open source solution for better technical interviews</title>
      <link>https://blog.dgraph.io/post/gru/</link>
      <pubDate>Thu, 21 Jul 2016 11:53:04 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/gru/</guid>
      <description>&lt;p&gt;Candidate &lt;strong&gt;REJECTED&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;4 out of 5 interviewers had liked the candidate. I was one of the 4. He had received either above or very close to 3.0, which is a good score. The interviewer who didn&amp;rsquo;t like the candidate had been at Google since early 2004. And he didn&amp;rsquo;t like the candidate&amp;rsquo;s joke question about whether he was very rich because he joined before Google went IPO. &lt;em&gt;I guess he wasn&amp;rsquo;t.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Releasing v0.4</title>
      <link>https://blog.dgraph.io/post/v0.4-release/</link>
      <pubDate>Thu, 14 Jul 2016 16:16:14 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/v0.4-release/</guid>
      <description>&lt;p&gt;Thanks for your feedback over the last couple of months. This release addresses some of the main pain points of using &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Custom encoding: Go implementation in net/rpc vs grpc and why we switched</title>
      <link>https://blog.dgraph.io/post/rpc-vs-grpc/</link>
      <pubDate>Sat, 25 Jun 2016 19:06:45 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/rpc-vs-grpc/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
, we aim to build a low latency, distributed graph database.
This means our data is distributed among nodes in the cluster.
Executing a query means multiple nodes are communicating with each other.
To keep our latency of communication low, we use a new form of serialization library called &lt;a href=&#34;https://google.github.io/flatbuffers/&#34;&gt;Flatbuffers&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing Dgraph</title>
      <link>https://blog.dgraph.io/post/hello-world/</link>
      <pubDate>Mon, 18 Apr 2016 14:37:08 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/hello-world/</guid>
      <description>&lt;p&gt;&lt;strong&gt;I&amp;rsquo;m very excited&lt;/strong&gt; to use this first post to talk about &lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34; target=&#34;_blank&#34;&gt;Dgraph&lt;/a&gt;
, what it is and why it was created.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>