<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Badger on Dgraph Blog</title>
    <link>https://blog.dgraph.io/tags/badger/</link>
    <description>Recent content in Badger on Dgraph Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2017, Dgraph Labs, Inc. All rights reserved.</copyright>
    <lastBuildDate>Wed, 03 Jul 2019 11:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://blog.dgraph.io/tags/badger/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Releasing BadgerDB v1.6.0</title>
      <link>https://blog.dgraph.io/post/badger-v1.6.0-release/</link>
      <pubDate>Wed, 03 Jul 2019 11:00:00 -0700</pubDate>
      
      <guid>https://blog.dgraph.io/post/badger-v1.6.0-release/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been almost a years since BadgerDB v1.5.0 was released. While both the
project and the community surrounding it have changed a lot, not many new
releases have seen the light of the day.  Happily, this changes today, as we
release BadgerDB v1.6.0 and announce our plans for BadgerDB v2 coming out next
week!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Semantic Versioning, Go Modules, and Databases</title>
      <link>https://blog.dgraph.io/post/serialization-versioning/</link>
      <pubDate>Thu, 27 Jun 2019 12:06:20 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/serialization-versioning/</guid>
      <description>A little bit over a month I joined Dgraph Labs, a really cool tiny startup based (mostly) in San Francisco and Bangalore building what we believe is the next generation of Graph Databases. Marketing spiel aside, I joined because the company is coming up with some really cool tech that benefits more than Graph Database users since all the pieces of the stack are open-sourced on github.com/dgraph-io.
One of these pieces is BadgerDB, a key-value store written completely in Go following the ideas of RocksDB and LSM trees.</description>
    </item>
    
    <item>
      <title>Why we choose Badger over RocksDB in Dgraph</title>
      <link>https://blog.dgraph.io/post/badger-over-rocksdb-in-dgraph/</link>
      <pubDate>Thu, 24 Jan 2019 10:00:00 -0800</pubDate>
      
      <guid>https://blog.dgraph.io/post/badger-over-rocksdb-in-dgraph/</guid>
      <description>At Dgraph, we&amp;rsquo;re building the most advanced graph database in the world. It does distributed transactions, low-latency arbitrary depth joins, traversals, provides synchronous replication and horizontal scalability &amp;mdash; with a simple GraphQL-like API. Does it sounds like a tough problem? That&amp;rsquo;s because it is.
This blog post is about Badger, the key-value database that makes it all happen under the hood, housing all Dgraph data, including Raft logs. Badger uses an LSM tree structure for holding keys.</description>
    </item>
    
    <item>
      <title>Concurrent ACID Transactions in Badger</title>
      <link>https://blog.dgraph.io/post/badger-txn/</link>
      <pubDate>Thu, 05 Oct 2017 13:30:16 +1100</pubDate>
      
      <guid>https://blog.dgraph.io/post/badger-txn/</guid>
      <description>When we started working on Badger, the aim was to keep things stupid simple. We needed to get rid of Cgo from Dgraph codebase, while also building something which can perform really well. We wanted to create it for ourselves and the broader Go community. Go has been a language of choice for many databases, and providing a performant native Go key-value store seemed like a win for everyone.</description>
    </item>
    
    <item>
      <title>Badger vs LMDB vs BoltDB: Benchmarking key-value databases in Go</title>
      <link>https://blog.dgraph.io/post/badger-lmdb-boltdb/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dgraph.io/post/badger-lmdb-boltdb/</guid>
      <description>If you have been following us, you may know that we released Badger a few months ago. Badger is a simple, efficient, and persistent key-value store, written in a hipster language. Even though it is not at v1.0 yet, we have already received a great response from the community. As of writing, Badger has 2350 stars on Github, and there have been lots of discussions online since the release announcement.</description>
    </item>
    
    <item>
      <title>Introducing Badger: A fast key-value store written purely in Go</title>
      <link>https://blog.dgraph.io/post/badger/</link>
      <pubDate>Sun, 14 May 2017 20:18:15 +1000</pubDate>
      
      <guid>https://blog.dgraph.io/post/badger/</guid>
      <description>We have built an efficient and persistent log structured merge (LSM) tree based key-value store, purely in Go language. It is based upon WiscKey paper included in USENIX FAST 2016. This design is highly SSD-optimized and separates keys from values to minimize I/O amplification; leveraging both the sequential and the random performance of SSDs.
We call it Badger. Based on benchmarks, Badger is at least 3.5x faster than RocksDB when doing random reads.</description>
    </item>
    
  </channel>
</rss>