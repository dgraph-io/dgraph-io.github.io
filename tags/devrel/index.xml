<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevRel on Dgraph Blog</title>
    <link>https://blog.dgraph.io/tags/devrel/</link>
    <description>Recent content in DevRel on Dgraph Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2017, Dgraph Labs, Inc. All rights reserved.</copyright>
    <lastBuildDate>Fri, 17 Jan 2020 20:30:00 +0530</lastBuildDate>
    
	<atom:link href="https://blog.dgraph.io/tags/devrel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting started with Dgraph tutorials series - 7: Searching user names using the fuzzy search on social graphs.</title>
      <link>https://blog.dgraph.io/post/tutorial-7-getting-started/</link>
      <pubDate>Fri, 17 Jan 2020 20:30:00 +0530</pubDate>
      
      <guid>https://blog.dgraph.io/post/tutorial-7-getting-started/</guid>
      <description>Welcome to the seventh episode of getting started with Dgraph. In the previous episode, we learned about building advanced text searches on social graphs in Dgraph, by modeling tweets as an example. We queried the tweets using the full-text and trigram indices and implemented full-text and regular-expression based search on the tweets.
In this tutorial, we&#39;ll continue exploring Dgraph&#39;s string querying capabilities using the twitter model from the fifth and the sixth tutorial.</description>
    </item>
    
    <item>
      <title>What’s Next? Learn Dgraph with the Getting-Started Blog Series</title>
      <link>https://blog.dgraph.io/post/introducing-getting-started-series/</link>
      <pubDate>Wed, 08 Jan 2020 21:30:00 +0530</pubDate>
      
      <guid>https://blog.dgraph.io/post/introducing-getting-started-series/</guid>
      <description>We are excited to announce that the &amp;ldquo;Get Started with Dgraph&amp;rdquo; of our documentation site now includes the episodes from our getting started blog series.
This blog series consists of various tutorials that are helpful for both beginners and intermediates to get started with Dgraph and to understand the product functionalities better.
At the time of writing, we’ve published six tutorial episodes, and you can find all of them on the docs.</description>
    </item>
    
    <item>
      <title>Releasing Dgraph v1.1.1: upsert blocks, facets, and encryption at rest</title>
      <link>https://blog.dgraph.io/post/release-v1.1.1/</link>
      <pubDate>Tue, 17 Dec 2019 07:00:00 -0800</pubDate>
      
      <guid>https://blog.dgraph.io/post/release-v1.1.1/</guid>
      <description>It&#39;s been a bit over three months since we released Dgraph v1.1.0 (see the announcement) but the wait and hard work were well worth it because today we announce that Dgraph v1.1.1 is released!
This blog post will cover the biggest changes since v1.1.0, including new features, bug fixes, and other improvements.
For those in a hurry, these are the changes covered in this article.
 Breaking changes  Removing expand _reverse_ and _forward_ No more @type directive   New features  Use @cascade and @normalize anywhere Improved support for upsert blocks Changes on types Better facets Transparent data encryption    Breaking changes While this is not a patch release, to fix some of the issues identified with v1.</description>
    </item>
    
    <item>
      <title>Getting started with Dgraph tutorials series - 6: Advanced text search on social graphs </title>
      <link>https://blog.dgraph.io/post/tutorial-6-getting-started/</link>
      <pubDate>Wed, 11 Dec 2019 06:30:00 +0530</pubDate>
      
      <guid>https://blog.dgraph.io/post/tutorial-6-getting-started/</guid>
      <description>Welcome to the sixth episode of getting started with Dgraph.
In the previous episode, we learned about building social graphs in Dgraph, by modeling tweets as an example. We queried the tweets using the hash and exact indices, and implemented a keyword-based search to find your favorite tweets using the term index and its functions.
In this tutorial, we&#39;ll continue from where we left off and learn about advanced text search features in Dgraph.</description>
    </item>
    
    <item>
      <title>The GraphQL Summit story</title>
      <link>https://blog.dgraph.io/post/graphql-summit-19/</link>
      <pubDate>Tue, 10 Dec 2019 14:30:00 +0530</pubDate>
      
      <guid>https://blog.dgraph.io/post/graphql-summit-19/</guid>
      <description>We took part in the recently held GraphQL Summit in San Francisco.
The conference was exciting, and it had a great line up of talks. As expected, the enthusiasm in the GraphQL community was unmatchable.
We took part as one of the platinum sponsors of the event, and we also unveiled the new GraphQL API for Dgraph. Read along as we share our experience at the event as it unfolded.</description>
    </item>
    
    <item>
      <title>Getting started with Dgraph tutorials series - 5: Tweet graph, string indices, and keyword-based searching</title>
      <link>https://blog.dgraph.io/post/tutorial-5-getting-started/</link>
      <pubDate>Tue, 26 Nov 2019 06:30:00 -0700</pubDate>
      
      <guid>https://blog.dgraph.io/post/tutorial-5-getting-started/</guid>
      <description>Welcome to the fifth episode of getting started with Dgraph. In the previous episode, we learned about using multi-language strings and operations on them using language tags.
In this episode, we&#39;ll model tweets in Dgraph and, using it, we&#39;ll learn more about string indices in Dgraph.
We&#39;ll specifically learn about:
 Modeling tweets in Dgraph. Using String indices in Dgraph  Querying twitter users using the hash index. Comparing strings using the exact index.</description>
    </item>
    
    <item>
      <title>Releasing BadgerDB v2.0</title>
      <link>https://blog.dgraph.io/post/releasing-badger-v2/</link>
      <pubDate>Mon, 18 Nov 2019 06:30:00 -0700</pubDate>
      
      <guid>https://blog.dgraph.io/post/releasing-badger-v2/</guid>
      <description>Dgraph is an open-source, transactional, distributed, native Graph database. Dgraph is optimized for high-performance reads and writes. It can serve queries and mutations with low latency and high throughput, even when they involve deep joins and traversals.
Much of Dgraph&#39;s advanced performance capabilities come from Badger. Badger is the embedded key-value store that is responsible for storing all of Dgraph&#39;s data.
Badger itself is not distributed, Dgraph implements a layer on top of it to provide the distributed capabilities.</description>
    </item>
    
    <item>
      <title>Getting started with Dgraph tutorials series - 4: Multi-language strings</title>
      <link>https://blog.dgraph.io/post/tutorial-4-getting-started/</link>
      <pubDate>Tue, 12 Nov 2019 06:30:00 -0700</pubDate>
      
      <guid>https://blog.dgraph.io/post/tutorial-4-getting-started/</guid>
      <description>Welcome to the fourth episode of getting started with Dgraph.
In the previous episode, we learned about Datatypes, Indexing, Filtering, and Reverse traversals in Dgraph.
In this episode, we&#39;ll learn about using multi-language strings and operations on them using the language tags.
Strings and languages Strings values in Dgraph are of UTF-8 format. Dgraph also supports values for string predicate types in multiple languages. The multi-lingual capability is particularly useful to build features, which requires you to store the same information in multiple languages.</description>
    </item>
    
    <item>
      <title>Dgraph tutorials series - 3: Datatypes, Indexing, Filtering, and Reverse traversals.</title>
      <link>https://blog.dgraph.io/post/tutorial-3-getting-started/</link>
      <pubDate>Wed, 30 Oct 2019 06:30:00 -0700</pubDate>
      
      <guid>https://blog.dgraph.io/post/tutorial-3-getting-started/</guid>
      <description>Welcome to the third episode of getting started with Dgraph. In the previous episode of the tutorial, we learned about the CRUD operations using UIDs. We also learned about traversals and recursive traversals.
In this tutorial, we&#39;ll learn about Dgraph&#39;s basic types and how to query for them. Specifically, we&#39;ll learn about:
 Basic data types in Dgraph. Querying for predicate values. Indexing. Filtering nodes. Traversing in reverse direction.  Let&#39;s start by building the following graph of a simple blog application.</description>
    </item>
    
    <item>
      <title>Dgraph tutorials series - 2: UID operations, updating nodes, and traversals</title>
      <link>https://blog.dgraph.io/post/tutorial-2-getting-started/</link>
      <pubDate>Tue, 15 Oct 2019 14:30:00 +0530</pubDate>
      
      <guid>https://blog.dgraph.io/post/tutorial-2-getting-started/</guid>
      <description>Welcome to the second episode of getting started with Dgraph. In the last episode of the tutorial, we learned some of the basics of Dgraph. Including how to run the database, add new nodes and predicates, and query them back.
In this episode, we&#39;ll build the above Graph and learn more about operations using the UID (Universal Identifier) of the nodes. Specifically, we&#39;ll learn about:
 Querying and updating nodes, deleting predicates using their UIDs.</description>
    </item>
    
    <item>
      <title>Dgraph tutorials series - 1: Getting started</title>
      <link>https://blog.dgraph.io/post/tutorial-1-getting-started/</link>
      <pubDate>Tue, 01 Oct 2019 14:30:00 +0530</pubDate>
      
      <guid>https://blog.dgraph.io/post/tutorial-1-getting-started/</guid>
      <description>Welcome to getting started with Dgraph. Dgraph is an open-source, transactional, distributed, native Graph Database. Here is the first episode of the tutorial series on using Dgraph.
In this tutorial, we&#39;ll learn how to build the following graph on Dgraph,
In the process, we&#39;ll learn about:
 Running Dgraph using the dgraph/standalone docker image. Running the following basic operations using Dgraph&#39;s UI Ratel, Creating a node. Creating an edge between two nodes.</description>
    </item>
    
    <item>
      <title>Releasing Dgraph v1.1.0</title>
      <link>https://blog.dgraph.io/post/release-v1.1.0/</link>
      <pubDate>Wed, 04 Sep 2019 08:00:00 -0400</pubDate>
      
      <guid>https://blog.dgraph.io/post/release-v1.1.0/</guid>
      <description>Dgraph is an open-source, transactional, distributed, native graph database. Ever since the internet explosion, the data not just has been growing in size, but also in its complexity and connectedness. Dgraph is built as an effort to enable and simplify the development of scalable cloud applications that could continue to thrive even when the data is highly connected and involved.
Set on this path, embracing open source all along the way, the first production-ready, major release v1.</description>
    </item>
    
    <item>
      <title>Dgraph&#39;s recap of GraphQL Conf - Berlin 2019</title>
      <link>https://blog.dgraph.io/post/graphql-conf-19/</link>
      <pubDate>Fri, 16 Aug 2019 14:30:00 +0530</pubDate>
      
      <guid>https://blog.dgraph.io/post/graphql-conf-19/</guid>
      <description>We took part in the recently held GraphQL conference in Berlin. The experience was fascinating, and we were amazed by the high voltage enthusiasm in the GraphQL community. Now, we couldn&#39;t help ourselves from sharing this with Dgraph&#39;s community! This is the story of the GraphQL conference in Berlin.
 The GraphQL connection If you&#39;re wondering what does Dgraph has to do with GraphQL, here&#39;s the answer. Dgraph had set its eyes and placed its bet on GraphQL very early.</description>
    </item>
    
    <item>
      <title>Celebrating 10,000 GitHub Stars</title>
      <link>https://blog.dgraph.io/post/10k-github-stars/</link>
      <pubDate>Tue, 16 Jul 2019 01:23:05 +0530</pubDate>
      
      <guid>https://blog.dgraph.io/post/10k-github-stars/</guid>
      <description>Dgraph is celebrating the milestone of reaching 10,000 GitHub stars 🎉.
This wouldn&#39;t have happened without all of you, so we want to thank the awesome community for being with us all the way along. This milestone comes at an exciting time for Dgraph.
Let&#39;s do quick time-travel through our journey, gaze at our milestones, and wrap it up with a glance through the exciting things in the pipeline.
Dgraph milestone timeline.</description>
    </item>
    
  </channel>
</rss>